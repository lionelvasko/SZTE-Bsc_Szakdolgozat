@page "/login"
@layout MainLayout
@using System.Text.Json;
@using System.Text;

<div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="card p-4 shadow-lg rounded bg-dark text-white" style="max-width: 400px; width: 100%;">
        <h2 class="text-center mb-4 text-primary">Login</h2>
        <EditForm Model="loginModel" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="eamil" class="form-label">Email</label>
                <input type="email" id="email" @bind="loginModel.Email" placeholder="Enter your email" class="form-control bg-transparent text-white" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" id="password" @bind="loginModel.Password" placeholder="Enter your password" class="form-control bg-transparent text-white" />
                <ValidationMessage For="@(() => loginModel.Password)" />    
            </div>
            <button type="submit" class="btn btn-primary w-100 shadow-sm mt-3">Login</button>
        </EditForm>
        <div class="text-center mt-4">
            <p class="mb-2">Don't have an account?</p>
            <button @onclick="NavigateToRegisterPage" class="btn btn-outline-secondary w-100 shadow-sm">Register Here</button>
        </div>
    </div>
</div>

@if (ShowModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login Info</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>@ModalMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool ShowModal { get; set; }
    private string ModalMessage { get; set; }

    public async Task Submit()
    {
        try
        {
            var loginData = new
            {
                Username = loginModel.Email,
                PasswordHash = loginModel.Password
            };

            var content = new StringContent(JsonSerializer.Serialize(loginData), Encoding.UTF8, "application/json");
            var response = await HttpClient.PostAsync("http://localhost:5223/authapi/login", content);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                // Save token for future use (e.g., local storage, secure storage)
                await SecureStorage.SetAsync("authtoken", token);
                ModalMessage = "Login successful!";
            }
            else
            {
                ModalMessage = "Invalid credentials. Please try again.";
            }

            ShowModal = true;
        }
        catch (Exception ex)
        {
            ModalMessage = $"Error: {ex.Message}";
            ShowModal = true;
        }
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void NavigateToRegisterPage()
    {
        NavigationManager.NavigateTo("/register");
    }

    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
}
