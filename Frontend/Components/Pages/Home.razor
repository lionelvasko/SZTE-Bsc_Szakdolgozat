@page "/"
@inject IJSRuntime jsRuntime

<div class="d-flex flex-column min-vh-100 bg-dark text-light">

    <div class="container my-4">

        <ul class="nav nav-pills justify-content-center">
            <li class="nav-item flex-grow-1 text-center">
                <a class="nav-link @GetTabClass(1) py-3" @onclick="() => SetActiveTab(1)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                    Entities
                </a>
            </li>
            <li class="nav-item flex-grow-1 text-center">
                <a class="nav-link @GetTabClass(2) py-3" @onclick="() => SetActiveTab(2)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                    Devices
                </a>
            </li>
        </ul>
    </div>
    <div class="tab-content" id="dashboardTabContent">
        <div class="tab-pane fade @GetTabClass(1)" id="entities" role="tabpanel" aria-labelledby="entitiesTab">
            <h4 class="mt-4">Entities</h4>
            <div class="row g-3">
                @foreach (var entity in entities)
                {
                    <div class="col-12 col-md-4 col-lg-3">
                        <div class="card bg-dark text-white border-primary shadow-lg rounded" style="cursor: pointer;">
                            <div class="card-body">
                                <div @onclick="() => ShowEntityDetails(entity)">
                                    <h5 class="card-title">@entity.DeviceURL</h5>
                                    <h5 class="card-title">@entity.Label</h5>
                                </div>
                                <div class="d-flex flex-column gap-2 mt-3">
                                    <div class="d-flex flex-column gap-2 mt-3">
                                        <button class="btn btn-success" @onclick="() => OpenShutter(entity.DeviceURL)">Open</button>
                                        <button class="btn btn-warning" @onclick="() => StopShutter(entity.DeviceURL)">Stop</button>
                                        <button class="btn btn-danger" @onclick="() => CloseShutter(entity.DeviceURL)">Close</button>
                                        <button class="btn btn-info" @onclick="() => MyPositionShutter(entity.DeviceURL)">My Position</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="tab-pane fade @GetTabClass(2)" id="devices" role="tabpanel" aria-labelledby="devicesTab">
            <h4 class="mt-4">Devices</h4>
            <div class="row g-3">
                @foreach (var device in devices)
                {
                    <div class="col-12 col-md-4 col-lg-3">
                        <div class="card bg-dark text-white border-primary shadow-lg rounded" style="cursor: pointer;" @onclick="() => ShowDeviceDetails(device)">
                            <div class="card-body">
                                <h5 class="card-title">@device.GatewayId</h5>
                                <p class="card-text">Device status: @device.Mode</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <button class="btn btn-lg btn-warning add-device-btn" style="position:fixed; right:24px; bottom:24px;" @onclick="ShowAddDeviceModal">+</button>
        </div>
    </div>
</div>

@if (showAddDeviceModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="addDeviceModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Add Device</h5>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs w-100" id="apiTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <a class="nav-link " @onclick="() => SetModalActiveTab(1)" id="tahomaTab" data-bs-toggle="tab" href="#tahoma" role="tab" aria-controls="tahoma" aria-selected="true">Tahoma API</a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link " @onclick="() => SetModalActiveTab(2)" id="tuyaTab" data-bs-toggle="tab" href="#tuya" role="tab" aria-controls="tuya" aria-selected="false">Tuya API</a>
                        </li>
                    </ul>
                    <div class="tab-content" id="apiTabContent">
                        <div class="tab-pane fade @GetModalTabClass(1)" id="tahoma" role="tabpanel" aria-labelledby="tahomaTab">
                            <h5>Tahoma API Device Form</h5>
                            <label for="apiType">API Type:</label>
                            <select class="form-control" id="apiType" @bind="selectedApiType">
                                <option value="online">Online API</option>
                                <option value="local">Local API</option>
                            </select>
                            @if (selectedApiType == "online")
                            {
                                <label for="homeURL" class="mt-2">Home URL:</label>
                                <select class="form-control" id="homeURL" @bind="homeURL">
                                    <option value="" disabled selected>Select a region</option>
                                    <option value="https://ha101-1.overkiz.com">ha101-1.overkiz.com (Europe, Middle East and Africa)</option>
                                    <option value="https://ha201-1.overkiz.com">ha201-1.overkiz.com (Asia and Pacific)</option>
                                    <option value="https://ha401-1.overkiz.com">ha401-1.overkiz.com (North America)</option>
                                </select>
                                <label for="email">Email:</label>
                                <input type="email" class="form-control" id="email" @bind="email" placeholder="example@sth.com" />
                                <label for="password">Password:</label>
                                <input type="text" class="form-control" id="password" @bind="password" placeholder="Password" />
                            }
                            else if (selectedApiType == "local")
                            {
                                <label for="homeURL" class="mt-2">Home URL:</label>
                                <select class="form-control" id="homeURL" @bind="homeURL">
                                    <option value="" disabled selected>Select a region</option>
                                    <option value="https://ha101-1.overkiz.com">ha101-1.overkiz.com (Europe, Middle East and Africa)</option>
                                    <option value="https://ha201-1.overkiz.com">ha201-1.overkiz.com (Asia and Pacific)</option>
                                    <option value="https://ha401-1.overkiz.com">ha401-1.overkiz.com (North America)</option>
                                </select>
                                <label for="gatewayPin">Device PIN:</label>
                                <input type="text" class="form-control" id="gatewayPin" @bind="gatewayPin" placeholder="1234-5678-9012" />
                                <label for="email">Email:</label>
                                <input type="email" class="form-control" id="email" @bind="email" placeholder="example@sth.com" />
                                <label for="password">Password:</label>
                                <input type="text" class="form-control" id="password" @bind="password" placeholder="Password" />
                                <div class="alert alert-warning mt-3">Jelenleg a local API hívások kidolgozás alatt vannak.</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="LoadEntities">Save Device</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddDeviceModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@if (showEntityDetailsModal && selectedEntity != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="entityDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedEntity.DeviceURL</h5>
                    <button type="button" class="btn-close" @onclick="CloseEntityDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Entity Name:</strong> @selectedEntity.DeviceURL</p>
                    <p><strong>Status:</strong> @selectedEntity.DeviceURL</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEntityDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeviceDetailsModal && selectedDevice != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="deviceDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedDevice.GatewayId</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeviceDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Device Name:</strong> @selectedDevice.GatewayId</p>
                    <p><strong>Status:</strong> @selectedDevice.Mode</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeviceDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private int activeTab = 1;  
    private int modalActiveTab = 1;

    private string tahomaDeviceName;
    private string tuyaDeviceName;

    private bool showEntityDetailsModal = false;
    private bool showDeviceDetailsModal = false;
    private bool showAddDeviceModal = false;

    private string selectedApiType = "online";

    private Entity selectedEntity;
    private Device selectedDevice;

    private string tuyaName;
    private string tuyaStatus = "Active";

    private List<Entity> entities = new();

    private async Task Login()
    {
        //var loginSucces = await SomfyApiService.LoginAsync();
    }

    private List<Device> devices = new();

    private void ShowEntityDetailsModal(Entity entity)
    {
        selectedEntity = entity;
        showEntityDetailsModal = true;
    }

    private void ShowDeviceDetailsModal(Device device)
    {
        selectedDevice = device;
        showDeviceDetailsModal = true;
    }

    private void CloseEntityDetailsModal()
    {
        showEntityDetailsModal = false;
        selectedEntity = null;
    }

    private void CloseDeviceDetailsModal()
    {
        showDeviceDetailsModal = false;
        selectedDevice = null;
    }
    private void CloseAddDeviceModal()
    {
        showAddDeviceModal = false;
        selectedDevice = null;
    }

    private void SetActiveTab(int tabNumber)
    {
        activeTab = tabNumber;
    }

    private string GetTabClass(int tabNumber)
    {
        return activeTab == tabNumber ? "show active" : "";
    }
    private void SetModalActiveTab(int tabNumber)
    {
        modalActiveTab = tabNumber;
    }

    private string GetModalTabClass(int tabNumber)
    {
        return modalActiveTab == tabNumber ? "show active" : "";
    }

    private void ShowEntityDetails(Entity entity)
    {
        selectedEntity = entity;
        showEntityDetailsModal = true;
    }

    private void ShowDeviceDetails(Device device)
    {
        selectedDevice = device;
        showDeviceDetailsModal = true;
    }
    private void ShowAddDeviceModal()
    {
        showAddDeviceModal = true;
    }

    private string homeURL;
    private string gatewayPin;
    private string email;
    private string password;

    private async Task LoadEntities()
    {
        await jsRuntime.InvokeVoidAsync("console.log", $"Home URL: {homeURL}");
        await jsRuntime.InvokeVoidAsync("console.log", $"Gateway PIN: {gatewayPin}");
        await jsRuntime.InvokeVoidAsync("console.log", $"Email: {email}");
        await jsRuntime.InvokeVoidAsync("console.log", $"Password: {password}");
        try
        {
            await jsRuntime.InvokeVoidAsync("console.log", $"Home URL: {homeURL}");
            var SingletonSomfyApiService = SomfyApiService.GetInstance();

            await jsRuntime.InvokeVoidAsync("console.log", "Attempting to log in...");
            bool validLogin = await SingletonSomfyApiService.LoginAsync(email, password, homeURL);
            await jsRuntime.InvokeVoidAsync("console.log", $"Login successful: {validLogin}");

            if (!validLogin)
            {
                await jsRuntime.InvokeVoidAsync("console.log", "Login failed.");
                return;
            }
            if(selectedApiType == "local")
            {
                await jsRuntime.InvokeVoidAsync("console.log", "Generating token...");
                var token = await SingletonSomfyApiService.GenerateTokenAsync(gatewayPin);
                await jsRuntime.InvokeVoidAsync("console.log", $"Token generated: {token}");
                await jsRuntime.InvokeVoidAsync("console.log", "Activating token...");
                bool successfulActivation = await SingletonSomfyApiService.ActivateTokenAsync(token);
                await jsRuntime.InvokeVoidAsync("console.log", $"Token activation successful: {successfulActivation}");

                if (!successfulActivation)
                {
                    await jsRuntime.InvokeVoidAsync("console.log", "Token activation failed.");
                    return;
                }
            }


            await jsRuntime.InvokeVoidAsync("console.log", "Fetching entities...");
            SingletonSomfyApiService.SetUrl(selectedApiType == "online");
            var generatedJson = await SingletonSomfyApiService.GetSetupJsonAsync();
            var mainDevice = SomfyAPI.Services.JsonHelper.GetDeviceFromJson(generatedJson);
            await jsRuntime.InvokeVoidAsync("console.log", mainDevice);
            var newEntities = SomfyAPI.Services.JsonHelper.GetEntitiesFromJson(generatedJson);
            await jsRuntime.InvokeVoidAsync("console.log", $"Entities fetched: {newEntities.Count()}");

            if (mainDevice != null)
            {
                devices.Add(new Device { GatewayId = mainDevice.GatewayId, Mode = mainDevice.Mode });
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("console.log", "mainDevice is null.");
            }
            foreach (var entity in newEntities)
            {
                entities.Add(entity);
            }

            await jsRuntime.InvokeVoidAsync("console.log", "Entities loaded successfully.");
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("console.error", $"An error occurred: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("console.log", "Initialized.");
    }

    private async Task OpenShutter(string deviceUrl)
    {
        await SomfyAPI.Services.ShutterControl.OpenShutter(deviceUrl);
    }

    private async Task StopShutter(string deviceUrl)
    {
        await SomfyAPI.Services.ShutterControl.StopShutter(deviceUrl);
    }

    private async Task CloseShutter(string deviceUrl)
    {
        await SomfyAPI.Services.ShutterControl.CloseShutter(deviceUrl);
    }

    private async Task MyPositionShutter(string deviceUrl)
    {
        await SomfyAPI.Services.ShutterControl.MyPositionShutter(deviceUrl);
    }

}