@page "/settings"
@using Microsoft.AspNetCore.Authorization

<div class="d-flex flex-column min-vh-100">
    <div class="container my-4">
        <ul class="nav nav-pills justify-content-center ">
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Authorized>
                    <li class="nav-item flex-grow-1 text-center">
                        <a class="nav-link @GetTabClass(1) py-3" @onclick="() => SetActiveTab(1)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                            @Localizer["User settings"]
                        </a>
                    </li>
                    <li class="nav-item flex-grow-1 text-center">
                        <a class="nav-link @GetTabClass(2) py-3" @onclick="() => SetActiveTab(2)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                            @Localizer["Application settings"]
                        </a>
                    </li>
                </Authorized>
                <NotAuthorized>
                    <li class="nav-item flex-grow-1 text-center">
                        <a class="nav-link @GetTabClass(2) py-3" @onclick="() => SetActiveTab(2)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                            @Localizer["Application settings"]
                        </a>
                    </li>
                </NotAuthorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        </ul>
    </div>

    <div class="flex-grow-1 d-flex align-items-center top-0">
        <div class="container shadow-lg p-5 rounded">
            @if (activeTab == 1)
            {
                <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                    <Authorized Context="authContext">
                        <h3 class="text-center text-info mb-4">@Localizer["User settings"]</h3>
                        <EditForm Model="@userModel" OnValidSubmit="HandleProfileChange" Context="editContext">
                            <div class="mb-4">
                                <label for="email" class="form-label fw-bold">@Localizer["Email address"]</label>
                                <input type="email" class="form-control shadow-sm border-secondary" id="email" @bind="userModel.Email" readonly/>
                            </div>
                            <div class="mb-4">
                                <label for="FirstName" class="form-label fw-bold">@Localizer["First name"]</label>
                                <input type="text" class="form-control shadow-sm border-secondary" id="FirstName" @bind="userModel.FirstName" />
                            </div>
                            <div class="mb-4">
                                <label for="LastName" class="form-label fw-bold">@Localizer["Last name"]</label>
                                <input type="text" class="form-control shadow-sm border-secondary" id="LastName" @bind="userModel.LastName" />
                            </div>

                            <button type="submit" class="btn btn-info btn-lg shadow w-100" style="border-radius: 2rem;">@Localizer["Update User"]</button>
                        </EditForm>
                        <EditForm Model="@passwordChangeRequest" OnValidSubmit="HandlePasswordChange" Context="editContext">
                            <div class="mb-4">
                                <label for="password" class="form-label fw-bold">@Localizer["Password"]</label>
                                <input type="password" class="form-control shadow-sm border-secondary" id="password" @bind="passwordChangeRequest.NewPassword" placeholder="@Localizer["Enter your password"]" />
                                <ValidationMessage For="@(() => passwordChangeRequest.NewPassword)" />
                            </div>
                            @if (!string.IsNullOrEmpty(passwordChangeRequest.NewPassword))
                            {
                                <div class="mb-4">
                                    <label for="passwordConfirm" class="form-label fw-bold">@Localizer["Confirm password"]</label>
                                    <input type="password" class="form-control shadow-sm border-secondary" id="passwordConfirm" @bind="passwordChangeRequest.ConfirmPassword" placeholder="@Localizer["Confirm your password"]" />
                                    <ValidationMessage For="@(() => passwordChangeRequest.ConfirmPassword)" />
                                </div>
                                <div class="mb-4">
                                    <label for="currentPassword" class="form-label fw-bold">@Localizer["Current Password"]</label>
                                    <input type="password" class="form-control shadow-sm border-secondary" id="currentPassword" @bind="passwordChangeRequest.CurrentPassword" placeholder="@Localizer["Current Password"]" />
                                    <ValidationMessage For="@(() => passwordChangeRequest.CurrentPassword)" />
                                </div>
                            }
                            <button type="submit" class="btn btn-info btn-lg shadow w-100" style="border-radius: 2rem;">@Localizer["Change Password"]</button>
                        </EditForm>
                    </Authorized>
                </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            }
            else if (activeTab == 2)
            {
                <div>
                    <h3 class="text-center text-info mb-4">@Localizer["Settings"]</h3>
                    <form>
                        <div class="mb-4">
                            <label for="theme" class="form-label fw-bold">@Localizer["Theme"]</label>
                            <select class="form-select bg-transparent text-info" @onchange="ChangeTheme" id="theme">
                                <option value="Light" selected="@(ThemeChangingService.CurrentTheme == AppTheme.Light)">@Localizer["Light"]</option>
                                <option value="Dark" selected="@(ThemeChangingService.CurrentTheme == AppTheme.Dark)">@Localizer["Dark"]</option>
                            </select>
                        </div>
                        <div class="mb-4">
                            <label for="language" class="form-label fw-bold">@Localizer["Language"]</label>
                            <select class="form-select shadow-sm border-secondary bg-transparent text-info" id="language" @onchange="LanguageChanged">
                                <option value="" disabled selected class="bg-transparent text-info">@Localizer["Select language"]</option>
                                <option value="en">
                                    @Localizer["English"]
                                </option>
                                <option value="hu">
                                    @Localizer["Hungarian"]
                                </option>
                                <option value="de">
                                    @Localizer["German"]
                                </option>
                            </select>
                        </div>
                    </form>
                </div>
            }
        </div>
    </div>
</div>

@if (ShowModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Register Info</h5>
                    <button type="button" class="btn-close" @onclick="OkModal" aria-label="@Localizer["Close"]"></button>
                </div>
                <div class="modal-body">
                    <p>@ModalMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="OkModal">@Localizer["Ok"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private int activeTab = 2;
    private string theme = "light";
    private string language;
    private UserModel userModel;
    private UpdatePasswordRequest passwordChangeRequest = new UpdatePasswordRequest()
    {
        ConfirmPassword = string.Empty,
        CurrentPassword = string.Empty,
        NewPassword = string.Empty
    };
    private bool ShowModal = false;
    private string ModalMessage;

    protected override async Task OnInitializedAsync()
    {
        language = await SecureStorage.GetAsync("selectedCulture");

        theme = await SecureStorage.GetAsync("selectedTheme") ?? "light";
        ChangeTheme(new ChangeEventArgs { Value = theme });
        userModel = await DbService.GetUserInfos();
    }

    private void SetActiveTab(int tabNumber)
    {
        activeTab = tabNumber;
    }

    private string GetTabClass(int tabNumber)
    {
        return activeTab == tabNumber ? "active" : "";
    }


    private async Task LanguageChanged(ChangeEventArgs e)
    {
        string cultureCode = e.Value?.ToString() ?? "en";
        await ChangeLanguage(cultureCode);
    }

    private async Task ChangeLanguage(string cultureCode)
    {
            GlobalizationService.SetCulture(cultureCode);
        await SecureStorage.SetAsync("selectedCulture", cultureCode);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void ChangeTheme(ChangeEventArgs e)
    {
        var selectedTheme = e.Value?.ToString();
        if (selectedTheme == "Light")
        {
            ThemeChangingService.SetTheme(AppTheme.Light);
        }
        else if (selectedTheme == "Dark")
        {
            ThemeChangingService.SetTheme(AppTheme.Dark);
        }
    }

    private async Task HandleProfileChange()
    {
        var updateNameRequest = new UpdateNameRequest
            {
                FirstName = userModel.FirstName,
                LastName = userModel.LastName,
            };
        var result = await DbService.UpdateUserName(updateNameRequest);
        if (result.IsSuccessStatusCode)
        {
            ModalMessage = Localizer["User settings updated successfully"];
            ShowModal = true;
        }
        else
        {
            ModalMessage = Localizer["Failed to update user settings"];
            ShowModal = true;
        }
    }

    private async Task HandlePasswordChange()
    {
        var result = await DbService.UpdateUserPassword(passwordChangeRequest);
        if (result.IsSuccessStatusCode)
        {
            ModalMessage = Localizer["Password changed successfully"];
            ShowModal = true;
        }
        else
        {
            ModalMessage = Localizer["Failed to change password"];
            ShowModal = true;
        }
    }

    private void OkModal()
    {
        ShowModal = false;
        ModalMessage = "";
    }


    [Inject] private IStringLocalizer<AppResources> Localizer { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private GlobalizationService LocalizationService { get; set; }
    [Inject] private ThemeChangingService ThemeChangingService { get; set; }
    [Inject] private DbService DbService { get; set; }
}
