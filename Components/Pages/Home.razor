@page "/"
@inject IJSRuntime jsRuntime

<div class="d-flex flex-column min-vh-100 bg-dark text-light">

    <div class="container my-4">

        <ul class="nav nav-pills justify-content-center">
            <li class="nav-item flex-grow-1 text-center">
                <a class="nav-link @GetTabClass(1) py-3" @onclick="() => SetActiveTab(1)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                    Entities
                </a>
            </li>
            <li class="nav-item flex-grow-1 text-center">
                <a class="nav-link @GetTabClass(2) py-3" @onclick="() => SetActiveTab(2)" style="font-size: 1.25rem; cursor: pointer; transition: all 0.3s; border-radius: 1.5rem;">
                    Devices
                </a>
            </li>
        </ul>
    </div>
    <div class="tab-content" id="dashboardTabContent">
        <div class="tab-pane fade @GetTabClass(1)" id="entities" role="tabpanel" aria-labelledby="entitiesTab">
            <h4 class="mt-4">Entities</h4>
            <div class="row g-3">
                @foreach (var entity in entities)
                {
                    <div class="col-12 col-md-4 col-lg-3">
                        <div class="card bg-dark text-white border-primary shadow-lg rounded" style="cursor: pointer;" @onclick="() => ShowEntityDetails(entity)">
                            <div class="card-body">
                                <h5 class="card-title">@entity.DeviceURL</h5>
                                <h5 class="card-title">@entity.Label</h5>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="tab-pane fade @GetTabClass(2)" id="devices" role="tabpanel" aria-labelledby="devicesTab">
            <h4 class="mt-4">Devices</h4>
            <div class="row g-3">
                @foreach (var device in devices)
                {
                    <div class="col-12 col-md-4 col-lg-3">
                        <div class="card bg-dark text-white border-primary shadow-lg rounded" style="cursor: pointer;" @onclick="() => ShowDeviceDetails(device)">
                            <div class="card-body">
                                <h5 class="card-title">@device.Name</h5>
                                <p class="card-text">Device status: @device.Status</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <button class="btn btn-lg btn-warning add-device-btn" style="position:fixed; right:24px; bottom:24px;" @onclick="ShowAddDeviceModal">+</button>
        </div>
    </div>


</div>

@if (showAddDeviceModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="addDeviceModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <ul class="nav nav-tabs w-100" id="apiTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <a class="nav-link " @onclick="() => SetModalActiveTab(1)" id="tahomaTab" data-bs-toggle="tab" href="#tahoma" role="tab" aria-controls="tahoma" aria-selected="true">Tahoma API</a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link " @onclick="() => SetModalActiveTab(2)" id="tuyaTab" data-bs-toggle="tab" href="#tuya" role="tab" aria-controls="tuya" aria-selected="false">Tuya API</a>
                        </li>
                    </ul>
                </div>

                <div class="modal-body">
                    <div class="tab-content" id="apiTabContent">

                        <div class="tab-pane fade @GetModalTabClass(1)" id="tahoma" role="tabpanel" aria-labelledby="tahomaTab">
                            <h5>Tahoma API Device Form</h5>
                            <label for="homeURL" class="mt-2">Home URL:</label>
                            <select class="form-control" id="homeURL" @bind="homeURL">
                                <option value="" disabled selected>Select a region</option>
                                <option value="https://ha101-1.overkiz.com">ha101-1.overkiz.com (Europe, Middle East and Africa)</option>
                                <option value="https://ha201-1.overkiz.com">ha201-1.overkiz.com (Asia and Pacific)</option>
                                <option value="https://ha401-1.overkiz.com">ha401-1.overkiz.com (North America)</option>
                            </select>
                            <label for="gatewayPin">Device PIN:</label>
                            <input type="text" class="form-control" id="gatewayPin" @bind="gatewayPin" placeholder="1234-5678-9012" />
                            <label for="email">Email:</label>
                            <input type="email" class="form-control" id="email" @bind="email" placeholder="example@sth.com" />
                            <label for="password">Password:</label>
                            <input type="text" class="form-control" id="password" @bind="password" placeholder="Password" />

                            <button type="button" class="btn btn-primary" @onclick="LoadEntities">Save Device</button>

                        </div>


                        <div class="tab-pane fade @GetModalTabClass(2)" id="tuya" role="tabpanel" aria-labelledby="tuyaTab">
                            <h5>Tuya API Device Form</h5>
                            <label for="tuyaName">Device Name:</label>
                            <input type="text" class="form-control" id="tuyaName" @bind="tuyaName" placeholder="Enter device name" />
                            <label for="tuyaStatus" class="mt-2">Device Status:</label>
                            <select class="form-control" id="tuyaStatus" @bind="tuyaStatus">
                                <option>Active</option>
                                <option>Offline</option>
                                <option>Maintenance</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddDeviceModal">Close</button>
                    <button type="button" class="btn btn-primary">Save Device</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showEntityDetailsModal && selectedEntity != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="entityDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedEntity.DeviceURL</h5>
                    <button type="button" class="btn-close" @onclick="CloseEntityDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Entity Name:</strong> @selectedEntity.DeviceURL</p>
                    <p><strong>Status:</strong> @selectedEntity.DeviceURL</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEntityDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeviceDetailsModal && selectedDevice != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="deviceDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedDevice.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeviceDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Device Name:</strong> @selectedDevice.Name</p>
                    <p><strong>Status:</strong> @selectedDevice.Status</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeviceDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private int activeTab = 1;  
    private int modalActiveTab = 1;

    private string tahomaDeviceName;
    private string tuyaDeviceName;

    private bool showEntityDetailsModal = false;
    private bool showDeviceDetailsModal = false;
    private bool showAddDeviceModal = false;

    private Entity selectedEntity;
    private Device selectedDevice;

    private string tuyaName;
    private string tuyaStatus = "Active";

    public class Device
    {
        public string Name { get; set; }
        public string Status { get; set; }
    }

    private List<Entity> entities = new();

    private async Task Login()
    {
        //var loginSucces = await SomfyApiService.LoginAsync();
    }

    private List<Device> devices = new List<Device>
{
    new Device { Name = "Device 1", Status = "Active" },
    new Device { Name = "Device 2", Status = "Offline" },
    new Device { Name = "Device 3", Status = "Active" },
    new Device { Name = "Device 4", Status = "Maintenance" },
    new Device { Name = "Device 5", Status = "Active" },
    new Device { Name = "Device 6", Status = "Offline" },
    new Device { Name = "Device 7", Status = "Active" },
    new Device { Name = "Device 8", Status = "Active" },
    new Device { Name = "Device 9", Status = "Active" },
    new Device { Name = "Device 10", Status = "Maintenance" },
    new Device { Name = "Device 11", Status = "Offline" },
    new Device { Name = "Device 12", Status = "Active" },
    new Device { Name = "Device 13", Status = "Active" },
    new Device { Name = "Device 14", Status = "Offline" },
    new Device { Name = "Device 15", Status = "Maintenance" },
    new Device { Name = "Device 16", Status = "Active" },
    new Device { Name = "Device 17", Status = "Active" },
    new Device { Name = "Device 18", Status = "Offline" },
    new Device { Name = "Device 19", Status = "Maintenance" },
    new Device { Name = "Device 20", Status = "Active" }
};

    private void ShowEntityDetailsModal(Entity entity)
    {
        selectedEntity = entity;
        showEntityDetailsModal = true;
    }

    private void ShowDeviceDetailsModal(Device device)
    {
        selectedDevice = device;
        showDeviceDetailsModal = true;
    }

    private void CloseEntityDetailsModal()
    {
        showEntityDetailsModal = false;
        selectedEntity = null;
    }

    private void CloseDeviceDetailsModal()
    {
        showDeviceDetailsModal = false;
        selectedDevice = null;
    }
    private void CloseAddDeviceModal()
    {
        showAddDeviceModal = false;
        selectedDevice = null;
    }

        /*
        private void SaveDevice()
            {
            var newDevice = new Device
            {
            Name = activeTab == 1 ? tahomaName : tuyaName,
            Status = activeTab == 1 ? tahomaStatus : tuyaStatus
    };
    devices.Add(newDevice);
    CloseAddDeviceModal();
    }
    */
    private void SetActiveTab(int tabNumber)
    {
        activeTab = tabNumber;
    }

    private string GetTabClass(int tabNumber)
    {
        return activeTab == tabNumber ? "show active" : "";
    }
    private void SetModalActiveTab(int tabNumber)
    {
        modalActiveTab = tabNumber;
    }

    private string GetModalTabClass(int tabNumber)
    {
        return modalActiveTab == tabNumber ? "show active" : "";
    }

    private void ShowEntityDetails(Entity entity)
    {
        selectedEntity = entity;
        showEntityDetailsModal = true;
    }

    private void ShowDeviceDetails(Device device)
    {
        selectedDevice = device;
        showDeviceDetailsModal = true;
    }
    private void ShowAddDeviceModal()
    {
        showAddDeviceModal = true;
    }

    private string homeURL;
    private string gatewayPin;
    private string email;
    private string password;

    private async Task LoadEntities()
    {
        await jsRuntime.InvokeVoidAsync("console.log", $"Home URL: {homeURL}");
        await jsRuntime.InvokeVoidAsync("console.log", $"Gateway PIN: {gatewayPin}");
        await jsRuntime.InvokeVoidAsync("console.log", $"Email: {email}");
        await jsRuntime.InvokeVoidAsync("console.log", $"Password: {password}");
        try
        {
            await jsRuntime.InvokeVoidAsync("console.log", $"Home URL: {homeURL}");
            var SingletonSomfyApiService = SomfyApiService.GetInstance();

            await jsRuntime.InvokeVoidAsync("console.log", "Attempting to log in...");
            bool validLogin = await SingletonSomfyApiService.LoginAsync(email, password, homeURL);
            await jsRuntime.InvokeVoidAsync("console.log", $"Login successful: {validLogin}");

            if (!validLogin)
            {
                await jsRuntime.InvokeVoidAsync("console.log", "Login failed.");
                return;
            }

            await jsRuntime.InvokeVoidAsync("console.log", "Generating token...");
            var token = await SingletonSomfyApiService.GenerateTokenAsync(gatewayPin);
            await jsRuntime.InvokeVoidAsync("console.log", $"Token generated: {token}");

            await jsRuntime.InvokeVoidAsync("console.log", "Activating token...");
            bool successfulActivation = await SingletonSomfyApiService.ActivateTokenAsync(token);
            await jsRuntime.InvokeVoidAsync("console.log", $"Token activation successful: {successfulActivation}");

            if (!successfulActivation)
            {
                await jsRuntime.InvokeVoidAsync("console.log", "Token activation failed.");
                return;
            }

            await jsRuntime.InvokeVoidAsync("console.log", "Fetching entities...");
            var newEntities = await SingletonSomfyApiService.GetEntitiesAsync();
            await jsRuntime.InvokeVoidAsync("console.log", $"Entities fetched: {newEntities.Count()}");

            foreach (var entity in newEntities)
            {
                entities.Add(entity);
            }

            await jsRuntime.InvokeVoidAsync("console.log", "Entities loaded successfully.");
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("console.error", $"An error occurred: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("console.log", "Initialized.");
    }
}
